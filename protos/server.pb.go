// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/server.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protos/server.proto", fileDescriptor_4054aa3396cab4e0)
}

var fileDescriptor_4054aa3396cab4e0 = []byte{
	// 103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x03, 0xf3, 0x84, 0xd8, 0x20, 0x82,
	0x52, 0x82, 0x50, 0xc9, 0x82, 0xa2, 0xfc, 0x64, 0x88, 0x94, 0x91, 0x31, 0x17, 0x0b, 0x88, 0x27,
	0xa4, 0xcd, 0xc5, 0x92, 0x99, 0x97, 0x96, 0x2f, 0xc4, 0x0f, 0x11, 0x2f, 0xd6, 0x2b, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x12, 0x40, 0x08, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x31,
	0x38, 0x71, 0x44, 0x41, 0x4d, 0x4c, 0x82, 0xd0, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f,
	0xe3, 0x47, 0xa5, 0x77, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcClient is the client API for Proc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcClient interface {
	Info(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type procClient struct {
	cc grpc.ClientConnInterface
}

func NewProcClient(cc grpc.ClientConnInterface) ProcClient {
	return &procClient{cc}
}

func (c *procClient) Info(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.proc/info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcServer is the server API for Proc service.
type ProcServer interface {
	Info(context.Context, *Request) (*Response, error)
}

// UnimplementedProcServer can be embedded to have forward compatible implementations.
type UnimplementedProcServer struct {
}

func (*UnimplementedProcServer) Info(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterProcServer(s *grpc.Server, srv ProcServer) {
	s.RegisterService(&_Proc_serviceDesc, srv)
}

func _Proc_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.proc/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcServer).Info(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.proc",
	HandlerType: (*ProcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "info",
			Handler:    _Proc_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/server.proto",
}
